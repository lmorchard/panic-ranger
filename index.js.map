{"version":3,"sources":["webpack:///index.js"],"names":["webpackJsonp","144","module","exports"],"mappings":"AAAAA,cAAc,IAERC;;;;;AAMA,SAAUC,EAAQC,OAuHrB","file":"index.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 144:\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no static exports found */\n/*! all exports used */\n/***/ (function(module, exports) {\n\n/*\nimport * as Core from './lib/core';\n\nimport './plugins/drawStats';\nimport './plugins/memoryStats';\nimport './plugins/datGui';\nimport './plugins/viewportPixi';\nimport './plugins/viewportCanvas';\nimport './plugins/viewportWebGL';\nimport './plugins/name';\nimport './plugins/health';\nimport './plugins/position';\nimport './plugins/motion';\nimport './plugins/thruster';\nimport './plugins/seeker';\nimport './plugins/collision';\nimport './plugins/bounce';\nimport './plugins/repulsor';\nimport './plugins/playerInputSteering';\nimport './plugins/hordeSpawn';\n\nconst debug = true;\n\nconst world = window.world = new Core.World({\n  systems: {\n    ViewportWebGL: {\n      debug: debug,\n      container: '#game',\n      canvas: '#viewport',\n      followName: 'hero1',\n      zoom: 0.3\n    },\n    DrawStats: {},\n    MemoryStats: {},\n    DatGui: {},\n    PlayerInputSteering: {},\n    Motion: {},\n    Position: {},\n    Thruster: {},\n    Seeker: {},\n    Repulsor: {},\n    Collision: {},\n    Bounce: {},\n    HordeSpawn: {\n      viewportSystemName: 'ViewportWebGL',\n      offscreenTTL: 0.5,\n      spawnMargin: 125,\n      minCount: 300,\n      spawn: (x, y) => {\n        const MIN_SIZE=100;\n        const MAX_SIZE=300;\n        const size = ((MAX_SIZE - MIN_SIZE) * Math.random()) + MIN_SIZE;\n        world.insert({\n          Sprite: { name: 'mine', size: size, color: 0xff2222 },\n          Health: { max: 4 * size * size },\n          Collidable: { },\n          Bounce: { mass: 4 * size * size },\n          Position: { x: x, y: y, rotation: (Math.PI * 2) * Math.random() },\n          Motion: { dx: 0, dy: 0, drotation: (Math.PI * 2) * Math.random() },\n          Thruster: { deltaV: 2400 + Math.random() * 100, maxV: 1200 + Math.random() * 200 },\n          Seeker: { targetName: 'hero1', radPerSec: 0.5 + Math.random() * 0.2 },\n          HordeSpawn: { }\n        });\n      }\n    }\n  }\n});\n\nworld.insert({\n  Name: { name: 'hero1'},\n  Sprite: { name: 'hero', size: 150, color: 0x0000ff },\n  Collidable: {},\n  Bounce: { mass: 7000 },\n  Position: { x: 0, y: 0, rotation: -(Math.PI / 2) },\n  Motion: {},\n  Thruster: { deltaV: 2800, maxV: 1400, active: false },\n  PlayerInputSteering: { radPerSec: Math.PI }\n});\n\nlet x = 0;\nfor (let y = 0; y > -15000; y -= 600) {\n  world.insert({\n    Name: { name: `repulsor${y}` },\n    Sprite: { name: 'repulsor', color: 0x228822 },\n    Position: { x, y },\n    Motion: { },\n    Repulsor: { range: 600, force: 300 }\n  });\n  x += (-300 + Math.random() * 600);\n}\n\nworld.start();\n\nconst vpSystem = world.getSystem('ViewportWebGL');\nconst spawnSystem = world.getSystem('HordeSpawn');\nconst guiSystem = world.getSystem('DatGui');\nconst gui = guiSystem.gui;\n\ngui.add(world, 'isPaused');\ngui.add(world, 'debug');\ngui.add(vpSystem, 'zoom', vpSystem.options.zoomMin, vpSystem.options.zoomMax).listen();\ngui.add(vpSystem, 'lineWidth', 1.0, 4.0).step(0.5).listen();\n\nconst names = [ 'gridEnabled', 'followEnabled', 'cameraX', 'cameraY' ];\nnames.forEach(function (name) {\n  gui.add(vpSystem, name).listen();\n});\n\nconst cp = vpSystem.cursorPosition;\ngui.add(cp, 'x').listen();\ngui.add(cp, 'y').listen();\n\ngui.add(spawnSystem, 'spawnCount').listen();\n*/\n\n/***/ })\n\n},[144]);\n\n\n// WEBPACK FOOTER //\n// index.js"],"sourceRoot":""}