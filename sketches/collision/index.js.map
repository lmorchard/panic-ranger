{"version":3,"sources":["webpack:///sketches/collision/index.js","webpack:///./src/sketches/collision.js"],"names":["webpackJsonp","145","module","exports","__webpack_require__","146","__webpack_exports__","spawnAsteroid","x","y","width","height","dx","dy","dr","mass","health","world","insert","Sprite","name","size","Health","max","Collidable","Bounce","Position","Motion","drotation","spawnField","centerX","centerY","radius","arguments","length","undefined","MAX_ASTEROIDS","MAX_TRIES","MIN_SIZE","MAX_SIZE","MAX_GRAV","vCenter","__WEBPACK_IMPORTED_MODULE_1__lib_Vector2D__","vSpawn","vGrav","inField","idx","c","Math","random","rot","PI","setValues","rotateAround","isClear","fldIdx","item","abs","push","rotate","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__lib_core__","window","systems","ViewportWebGL","debug","container","followName","lineWidth","zoom","DrawStats","MemoryStats","DatGui","PlayerInputSteering","Thruster","Seeker","Collision","Name","color","deltaV","maxV","active","radPerSec","start","vpSystem","getSystem","guiSystem","gui","add","options","zoomMin","zoomMax","listen","step","forEach","cp","cursorPosition"],"mappings":"AAAAA,cAAc,IAERC;;;;;AAMA,SAAUC,EAAQC,EAASC,GAEjCF,EAAOC,QAAUC,oCAAsD,MAKjEC;;;;;AAMA,SAAUH,EAAQI,EAAqBF,GAE7C,YC8BA,SAASG,GAAcC,EAAGC,EAAGC,EAAOC,EAAQC,EAAIC,EAAIC,EAAIC,EAAMC,GAC5DC,EAAMC,QACJC,QAAUC,KAAM,WAAYC,KAAMX,GAClCY,QAAUC,IAAKP,GACfQ,cACAC,QAAUV,KAAMA,GAChBW,UAAYlB,EAAGA,EAAGC,EAAGA,GACrBkB,QAAUf,GAAIA,EAAIC,GAAIA,EAAIe,UAAWd,KAIzC,QAASe,GAAWC,EAASC,GAQ3B,IAAK,GAR+BC,GACsCC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAD/B,IACzCG,EAAwEH,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAA1D,IAAKI,EAAqDJ,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAA3C,EAAGK,EAAwCL,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAA/B,GAAIM,EAA2BN,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAAlB,IAAKO,EAAaP,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,GAAJ,GAEhEQ,EAAU,GAAIC,GAAA,EAASX,EAASD,GAChCa,EAAS,GAAID,GAAA,EAAS,EAAG,GACzBE,EAAQ,GAAIF,GAAA,EAAS,EAAG,GACxBG,KAEGC,EAAM,EAAGA,EAAMV,EAAeU,IACrC,IAAK,GAAIC,GAAI,EAAGA,EAAIV,EAAWU,IAAK,CAElC,GAAM1B,IAASkB,EAAWD,GAAYU,KAAKC,SAAYX,EACjDY,EAAe,EAARF,KAAKG,GAAQH,KAAKC,QAC/BN,GAAOS,UAAUX,EAAQjC,EAAGiC,EAAQhC,IAAOuB,EAAS,GAAKgB,KAAKC,SAAY,IAC1EN,EAAOU,aAAaZ,EAASS,EAG7B,KAAK,GADDI,IAAU,EACLC,EAAS,EAAGA,EAASV,EAAQX,OAAQqB,IAAU,CACtD,GAAMC,GAAOX,EAAQU,EACrB,MAAkC,EAA9BP,KAAKS,IAAId,EAAOnC,EAAIgD,EAAKhD,IAAgC,OAArBa,EAAOmC,EAAK9C,WAClB,EAA9BsC,KAAKS,IAAId,EAAOlC,EAAI+C,EAAK/C,IAAiC,OAAtBY,EAAOmC,EAAK7C,SAApD,CACA2C,GAAU,CACV,QAEGA,IAELT,EAAQa,MAAOlD,EAAGmC,EAAOnC,EAAGC,EAAGkC,EAAOlC,EAAGC,MAAOW,EAAMV,OAAQU,IAE9DuB,EAAMQ,UAAU,EAAGJ,KAAKC,SAAWT,GACnCI,EAAMe,OAAOT,GAEb3C,EACEoC,EAAOnC,EAAGmC,EAAOlC,EACjBY,EAAMA,EACNuB,EAAMpC,EAAGoC,EAAMnC,EACJ,IAAVuC,KAAKG,GAAaH,KAAKC,SACxB,EAAI5B,EAAOA,EACX,EAAIA,EAAOA,KD7EnBuC,OAAOC,eAAevD,EAAqB,cAAgBwD,OAAO,GAC7C,IAAIC,GAA0C3D,oBAAuC,GACjFsC,EAA8CtC,wBAA2C,ICN5Ga,GDOsEb,6BAAgD,IAC9CA,+BAAkD,IACvDA,0BAA6C,IACtCA,iCAAoD,IAC7DA,wBAA2C,IACzCA,0BAA6C,IAC3CA,4BAA+C,GACjDA,0BAA6C,GAC1CA,4BAA+C,IACjDA,0BAA6C,IAC1CA,6BAAgD,IACnDA,0BAA6C,IAChCA,uCAA0D,ICnBnI4D,OAAO/C,MAAQ,GAAI8C,GAAA,OAC/BE,SACEC,eACEC,OALQ,EAMRC,UAAW,QACXC,WAAY,QACZC,UAAW,IACXC,KAAM,IAERC,aACAC,eACAC,UACAC,uBACAhD,UACAD,YACAkD,YACAC,UACAC,aACArD,aAIJR,GAAMC,QACJ6D,MAAQ3D,KAAM,SACdD,QAAUC,KAAM,OAAQC,KAAM,IAAK2D,MAAO,SAC1CxD,cACAC,QAAUV,KAAM,KAChBW,UAAYlB,EAAG,EAAGC,EAAG,GACrBkB,UACAiD,UAAYK,OAAQ,KAAMC,KAAM,IAAKC,QAAQ,GAC7CR,qBAAuBS,UAAWpC,KAAKG,KA8DzCtB,IAJY,SACC,IACD,KAGZA,EALY,QACC,IACD,KAIZA,EANY,SACC,IACD,KAKZA,GAPY,QACC,IACD,KAOZZ,EAAMoE,OAEN,IAAMC,GAAWrE,EAAMsE,UAAU,iBAC3BC,EAAYvE,EAAMsE,UAAU,UAC5BE,EAAMD,EAAUC,GAEtBA,GAAIC,IAAIzE,EAAO,YACfwE,EAAIC,IAAIzE,EAAO,SACfwE,EAAIC,IAAIJ,EAAU,OAAQA,EAASK,QAAQC,QAASN,EAASK,QAAQE,SAASC,SAC9EL,EAAIC,IAAIJ,EAAU,YAAa,EAAK,GAAKS,KAAK,IAAKD,UAEnC,cAAe,gBAAiB,UAAW,WACrDE,QAAQ,SAAU5E,GACtBqE,EAAIC,IAAIJ,EAAUlE,GAAM0E,UAG1B,IAAMG,GAAKX,EAASY,cACpBT,GAAIC,IAAIO,EAAI,KAAKH,SACjBL,EAAIC,IAAIO,EAAI,KAAKH,YDgDd","file":"sketches/collision/index.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 145:\n/*!*****************************************!*\\\n  !*** multi ./src/sketches/collision.js ***!\n  \\*****************************************/\n/*! no static exports found */\n/*! all exports used */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! ./src/sketches/collision.js */146);\n\n\n/***/ }),\n\n/***/ 146:\n/*!***********************************!*\\\n  !*** ./src/sketches/collision.js ***!\n  \\***********************************/\n/*! exports provided:  */\n/*! all exports used */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_core__ = __webpack_require__(/*! ../lib/core */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_Vector2D__ = __webpack_require__(/*! ../lib/Vector2D */ 17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__plugins_drawStats__ = __webpack_require__(/*! ../plugins/drawStats */ 19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__plugins_memoryStats__ = __webpack_require__(/*! ../plugins/memoryStats */ 20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__plugins_datGui__ = __webpack_require__(/*! ../plugins/datGui */ 18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plugins_viewportWebGL__ = __webpack_require__(/*! ../plugins/viewportWebGL */ 30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__plugins_name__ = __webpack_require__(/*! ../plugins/name */ 21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__plugins_health__ = __webpack_require__(/*! ../plugins/health */ 26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__plugins_position__ = __webpack_require__(/*! ../plugins/position */ 7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__plugins_motion__ = __webpack_require__(/*! ../plugins/motion */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__plugins_thruster__ = __webpack_require__(/*! ../plugins/thruster */ 29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__plugins_seeker__ = __webpack_require__(/*! ../plugins/seeker */ 28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__plugins_collision__ = __webpack_require__(/*! ../plugins/collision */ 37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__plugins_bounce__ = __webpack_require__(/*! ../plugins/bounce */ 35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__plugins_playerInputSteering__ = __webpack_require__(/*! ../plugins/playerInputSteering */ 39);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debug = true;\n\nvar world = window.world = new __WEBPACK_IMPORTED_MODULE_0__lib_core__[\"World\"]({\n  systems: {\n    ViewportWebGL: {\n      debug: debug,\n      container: '#game',\n      followName: 'hero1',\n      lineWidth: 1.5,\n      zoom: 0.5\n    },\n    DrawStats: {},\n    MemoryStats: {},\n    DatGui: {},\n    PlayerInputSteering: {},\n    Motion: {},\n    Position: {},\n    Thruster: {},\n    Seeker: {},\n    Collision: {},\n    Bounce: {}\n  }\n});\n\nworld.insert({\n  Name: { name: 'hero1' },\n  Sprite: { name: 'hero', size: 100, color: 0x3333ff },\n  Collidable: {},\n  Bounce: { mass: 7000 },\n  Position: { x: 0, y: 0 },\n  Motion: {},\n  Thruster: { deltaV: 1200, maxV: 500, active: false },\n  PlayerInputSteering: { radPerSec: Math.PI }\n});\n\nfunction spawnAsteroid(x, y, width, height, dx, dy, dr, mass, health) {\n  world.insert({\n    Sprite: { name: 'asteroid', size: width },\n    Health: { max: health },\n    Collidable: {},\n    Bounce: { mass: mass },\n    Position: { x: x, y: y },\n    Motion: { dx: dx, dy: dy, drotation: dr }\n  });\n}\n\nfunction spawnField(centerX, centerY) {\n  var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;\n  var MAX_ASTEROIDS = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 150;\n  var MAX_TRIES = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;\n  var MIN_SIZE = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 20;\n  var MAX_SIZE = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 300;\n  var MAX_GRAV = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 10;\n\n\n  var vCenter = new __WEBPACK_IMPORTED_MODULE_1__lib_Vector2D__[\"a\" /* default */](centerY, centerX);\n  var vSpawn = new __WEBPACK_IMPORTED_MODULE_1__lib_Vector2D__[\"a\" /* default */](0, 0);\n  var vGrav = new __WEBPACK_IMPORTED_MODULE_1__lib_Vector2D__[\"a\" /* default */](0, 0);\n  var inField = [];\n\n  for (var idx = 0; idx < MAX_ASTEROIDS; idx++) {\n    for (var c = 0; c < MAX_TRIES; c++) {\n\n      var _size = (MAX_SIZE - MIN_SIZE) * Math.random() + MIN_SIZE;\n      var rot = Math.PI * 4 * Math.random();\n      vSpawn.setValues(vCenter.x, vCenter.y - ((radius - 1) * Math.random() + 1));\n      vSpawn.rotateAround(vCenter, rot);\n\n      var isClear = true;\n      for (var fldIdx = 0; fldIdx < inField.length; fldIdx++) {\n        var item = inField[fldIdx];\n        if (Math.abs(vSpawn.x - item.x) * 2 >= (_size + item.width) * 1.025) {\n          continue;\n        }\n        if (Math.abs(vSpawn.y - item.y) * 2 >= (_size + item.height) * 1.025) {\n          continue;\n        }\n        isClear = false;\n        break;\n      }\n      if (!isClear) {\n        continue;\n      }\n\n      inField.push({ x: vSpawn.x, y: vSpawn.y, width: _size, height: _size });\n\n      vGrav.setValues(0, Math.random() * MAX_GRAV);\n      vGrav.rotate(rot);\n\n      spawnAsteroid(vSpawn.x, vSpawn.y, _size, _size, vGrav.x, vGrav.y, Math.PI * 0.25 * Math.random(), 4 * _size * _size, 4 * _size * _size);\n    }\n  }\n}\n\nvar pos = 470;\nvar size = 440;\nvar num = 200;\n\nspawnField(-pos, -pos, size, num);\nspawnField(pos, pos, size, num);\nspawnField(pos, -pos, size, num);\nspawnField(-pos, pos, size, num);\n\nworld.start();\n\nvar vpSystem = world.getSystem('ViewportWebGL');\nvar guiSystem = world.getSystem('DatGui');\nvar gui = guiSystem.gui;\n\ngui.add(world, 'isPaused');\ngui.add(world, 'debug');\ngui.add(vpSystem, 'zoom', vpSystem.options.zoomMin, vpSystem.options.zoomMax).listen();\ngui.add(vpSystem, 'lineWidth', 1.0, 4.0).step(0.5).listen();\n\nvar names = ['gridEnabled', 'followEnabled', 'cameraX', 'cameraY'];\nnames.forEach(function (name) {\n  gui.add(vpSystem, name).listen();\n});\n\nvar cp = vpSystem.cursorPosition;\ngui.add(cp, 'x').listen();\ngui.add(cp, 'y').listen();\n\n/***/ })\n\n},[145]);\n\n\n// WEBPACK FOOTER //\n// sketches/collision/index.js","import * as Core from '../lib/core';\n\nimport Vector2D from '../lib/Vector2D';\n\nimport '../plugins/drawStats';\nimport '../plugins/memoryStats';\nimport '../plugins/datGui';\nimport '../plugins/viewportWebGL';\nimport '../plugins/name';\nimport '../plugins/health';\nimport '../plugins/position';\nimport '../plugins/motion';\nimport '../plugins/thruster';\nimport '../plugins/seeker';\nimport '../plugins/collision';\nimport '../plugins/bounce';\nimport '../plugins/playerInputSteering';\n\nconst debug = true;\n\nconst world = window.world = new Core.World({\n  systems: {\n    ViewportWebGL: {\n      debug: debug,\n      container: '#game',\n      followName: 'hero1',\n      lineWidth: 1.5,\n      zoom: 0.5\n    },\n    DrawStats: {},\n    MemoryStats: {},\n    DatGui: {},\n    PlayerInputSteering: {},\n    Motion: {},\n    Position: {},\n    Thruster: {},\n    Seeker: {},\n    Collision: {},\n    Bounce: {}\n  }\n});\n\nworld.insert({\n  Name: { name: 'hero1'},\n  Sprite: { name: 'hero', size: 100, color: 0x3333ff },\n  Collidable: {},\n  Bounce: { mass: 7000 },\n  Position: { x: 0, y: 0 },\n  Motion: {},\n  Thruster: { deltaV: 1200, maxV: 500, active: false },\n  PlayerInputSteering: { radPerSec: Math.PI }\n});\n\nfunction spawnAsteroid(x, y, width, height, dx, dy, dr, mass, health) {\n  world.insert({\n    Sprite: { name: 'asteroid', size: width},\n    Health: { max: health },\n    Collidable: {},\n    Bounce: { mass: mass },\n    Position: { x: x, y: y },\n    Motion: { dx: dx, dy: dy, drotation: dr }\n  });\n}\n\nfunction spawnField(centerX, centerY, radius=300,\n    MAX_ASTEROIDS=150, MAX_TRIES=5, MIN_SIZE=20, MAX_SIZE=300, MAX_GRAV=10) {\n\n  const vCenter = new Vector2D(centerY, centerX);\n  const vSpawn = new Vector2D(0, 0);\n  const vGrav = new Vector2D(0, 0);\n  const inField = [];\n\n  for (let idx = 0; idx < MAX_ASTEROIDS; idx++) {\n    for (let c = 0; c < MAX_TRIES; c++) {\n\n      const size = ((MAX_SIZE - MIN_SIZE) * Math.random()) + MIN_SIZE;\n      const rot = (Math.PI*4) * Math.random();\n      vSpawn.setValues(vCenter.x, vCenter.y - (((radius - 1) * Math.random()) + 1));\n      vSpawn.rotateAround(vCenter, rot);\n\n      let isClear = true;\n      for (let fldIdx = 0; fldIdx < inField.length; fldIdx++) {\n        const item = inField[fldIdx];\n        if (Math.abs(vSpawn.x - item.x) * 2 >= (size + item.width) * 1.025) { continue; }\n        if (Math.abs(vSpawn.y - item.y) * 2 >= (size + item.height) * 1.025) { continue; }\n        isClear = false;\n        break;\n      }\n      if (!isClear) { continue; }\n\n      inField.push({ x: vSpawn.x, y: vSpawn.y, width: size, height: size });\n\n      vGrav.setValues(0, Math.random() * MAX_GRAV);\n      vGrav.rotate(rot);\n\n      spawnAsteroid(\n        vSpawn.x, vSpawn.y,\n        size, size,\n        vGrav.x, vGrav.y,\n        (Math.PI * 0.25) * Math.random(),\n        4 * size * size,\n        4 * size * size\n      );\n\n    }\n  }\n}\n\nconst pos = 470;\nconst size = 440;\nconst num = 200;\n\nspawnField(-pos, -pos, size, num);\nspawnField(pos, pos, size, num);\nspawnField(pos, -pos, size, num);\nspawnField(-pos, pos, size, num);\n\nworld.start();\n\nconst vpSystem = world.getSystem('ViewportWebGL');\nconst guiSystem = world.getSystem('DatGui');\nconst gui = guiSystem.gui;\n\ngui.add(world, 'isPaused');\ngui.add(world, 'debug');\ngui.add(vpSystem, 'zoom', vpSystem.options.zoomMin, vpSystem.options.zoomMax).listen();\ngui.add(vpSystem, 'lineWidth', 1.0, 4.0).step(0.5).listen();\n\nconst names = [ 'gridEnabled', 'followEnabled', 'cameraX', 'cameraY' ];\nnames.forEach(function (name) {\n  gui.add(vpSystem, name).listen();\n});\n\nconst cp = vpSystem.cursorPosition;\ngui.add(cp, 'x').listen();\ngui.add(cp, 'y').listen();\n\n\n\n// WEBPACK FOOTER //\n// ./src/sketches/collision.js"],"sourceRoot":""}